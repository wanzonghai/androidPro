apply plugin: 'com.android.application'


apply plugin: 'stringfog'

apply plugin: 'android-junk-code'

androidJunkCode {
    variantConfig {
        release {
            //注意：这里的release是变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
            packageBase = "com.pkfooyt.wasjff.zsufhuf" //生成java类根包名
            packageCount = 30 //生成包数量
            activityCountPerPackage = 3 //每个包下生成Activity类数量
            excludeActivityJavaFile = false
            //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
            otherCountPerPackage = 50  //每个包下生成其它类的数量
            methodCountPerClass = 20  //每个类下生成方法数量
            resPrefix = "yfifpo_"  //生成的layout、drawable、string等资源名前缀
            drawableCount = 0  //生成drawable资源数量
            stringCount = 300  //生成string数量
        }
        debug {
            //注意：这里的release是变体名称，如果没有设置productFlavors就是buildType名称，如果有设置productFlavors就是flavor+buildType，例如（freeRelease、proRelease）
            packageBase = "com.pkfooyt.wasjff.zsufhuf" //生成java类根包名
            packageCount = 30 //生成包数量
            activityCountPerPackage = 3 //每个包下生成Activity类数量
            excludeActivityJavaFile = false
            //是否排除生成Activity的Java文件,默认false(layout和写入AndroidManifest.xml还会执行)，主要用于处理类似神策全埋点编译过慢问题
            otherCountPerPackage = 50  //每个包下生成其它类的数量
            methodCountPerClass = 20  //每个类下生成方法数量
            resPrefix = "yfifpo_"  //生成的layout、drawable、string等资源名前缀
            drawableCount = 0  //生成drawable资源数量
            stringCount = 300  //生成string数量
        }
    }
}

stringfog {
    // 这是加解密key，可以自由定义。
    key 'oeosijyugu'
    // 开关
    enable true
    // 加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    fogPackages = []
}

apply plugin: "com.bytedance.android.aabResGuard"
aabResGuard {
//    mappingFile = file("mapping.txt").toPath() // 用于增量混淆的 mapping 文件
    whiteList = [ // 白名单规则
                  "*.R.raw.*",
                  "*.R.drawable.icon"
    ]
    obfuscatedBundleFileName = "release.aab" // 混淆后的文件名称，必须以 `.aab` 结尾
    mergeDuplicatedRes = true // 是否允许去除重复资源
    enableFilterFiles = true // 是否允许过滤文件
    filterList = [ // 文件过滤规则
                   "META-INF/*"
    ]
    enableFilterStrings = false // 过滤文案
    unusedStringPath = file("unused.txt").toPath() // 过滤文案列表路径 默认在mapping同目录查找
    languageWhiteList = ["en", "zh"] // 保留en,en-xx,zh,zh-xx等语言，其余均删除
}




android {
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    signingConfigs {
        release {
            keyAlias 'leisure'
            keyPassword '123456'
            storeFile file("../key/leisure.jks")
            storePassword '123456'
        }
        debug {
            keyAlias 'leisure'
            keyPassword '123456'
            storeFile file("../key/leisure.jks")
            storePassword '123456'
        }
    }
    compileSdkVersion 33
    buildToolsVersion '33.0.0'
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
		applicationId "com.leisure.haaperpy"
        versionCode 2
        versionName "4.0.0"
        minSdkVersion 24
        targetSdkVersion 33
        multiDexEnabled true //方法数超过65536时，开启多dex的支持
        ndk {
            // 设置支持的SO库架构
            abiFilters 'arm64-v8a', 'armeabi-v7a'//, 'x86' 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        flavorDimensions "default"
    }
    sourceSets.main {
        jniLibs.srcDir 'libs'
    }
    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    // java8配置
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}
repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation project(path: ':conch')
    testImplementation 'junit:junit:4.12'

    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.android.gms:play-services-auth:15.0.0'
    implementation 'com.adjust.sdk:adjust-android:4.33.0'
    implementation 'com.alibaba:fastjson:1.2.76'
    implementation(platform("com.google.firebase:firebase-bom:32.2.0"))
    implementation("com.google.firebase:firebase-analytics")
    implementation("com.google.firebase:firebase-auth")
    implementation 'com.google.firebase:firebase-messaging:23.2.0'
    implementation("com.google.firebase:firebase-firestore")
    implementation 'com.github.megatronking.stringfog:xor:1.1.0'

}
apply plugin: 'com.google.gms.google-services'